diff -cNr gcc-2.95.3/gcc/collect2.c gcc-2.95.3-beos/gcc/collect2.c
*** gcc-2.95.3/gcc/collect2.c	Thu Jan 25 23:03:01 2001
--- gcc-2.95.3-beos/gcc/collect2.c	Fri Apr  6 06:35:02 2001
***************
*** 54,59 ****
--- 54,63 ----
  #define obstack_chunk_alloc xmalloc
  #define obstack_chunk_free free
  
+ #ifndef LIBRARY_PATH_ENV
+ #define LIBRARY_PATH_ENV "LIBRARY_PATH"
+ #endif
+ 
  extern char *make_temp_file PROTO ((char *));
  
  /* On certain systems, we have code that works by scanning the object file
***************
*** 1504,1512 ****
        if (ptr)
  	fprintf (stderr, "COMPILER_PATH       = %s\n", ptr);
  
!       ptr = getenv ("LIBRARY_PATH");
        if (ptr)
! 	fprintf (stderr, "LIBRARY_PATH        = %s\n", ptr);
  
        fprintf (stderr, "\n");
      }
--- 1508,1516 ----
        if (ptr)
  	fprintf (stderr, "COMPILER_PATH       = %s\n", ptr);
  
!       ptr = getenv (LIBRARY_PATH_ENV);
        if (ptr)
! 	fprintf (stderr, "%-20s= %s\n", LIBRARY_PATH_ENV, ptr);
  
        fprintf (stderr, "\n");
      }
diff -cNr gcc-2.95.3/gcc/config/i386/beos-elf.h gcc-2.95.3-beos/gcc/config/i386/beos-elf.h
*** gcc-2.95.3/gcc/config/i386/beos-elf.h	Thu Jan  1 09:00:00 1970
--- gcc-2.95.3-beos/gcc/config/i386/beos-elf.h	Tue Apr 10 07:32:08 2001
***************
*** 0 ****
--- 1,502 ----
+ /* Definitions for Intel x86 running BeOS
+    Copyright (C) 1998 Free Software Foundation, Inc.
+ 
+ This file is part of GNU CC.
+ 
+ GNU CC is free software; you can redistribute it and/or modify
+ it under the terms of the GNU General Public License as published by
+ the Free Software Foundation; either version 2, or (at your option)
+ any later version.
+ 
+ GNU CC is distributed in the hope that it will be useful,
+ but WITHOUT ANY WARRANTY; without even the implied warranty of
+ MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ GNU General Public License for more details.
+ 
+ You should have received a copy of the GNU General Public License
+ along with GNU CC; see the file COPYING.  If not, write to
+ the Free Software Foundation, 59 Temple Place - Suite 330,
+ Boston, MA 02111-1307, USA.  */
+ 
+ #include <i386/i386.h>	/* Base i386 target machine definitions */
+ #include <i386/att.h>	/* Use the i386 AT&T assembler syntax */
+ #include <svr4.h>	/* some common stuff */
+ 
+ #undef TARGET_VERSION
+ #define TARGET_VERSION fprintf (stderr, " (i386 BeOS/ELF)");
+ 
+ /* Change debugging to Dwarf2.  */
+ #undef PREFERRED_DEBUGGING_TYPE
+ #define PREFERRED_DEBUGGING_TYPE DWARF2_DEBUG
+ 
+ /* The SVR4 ABI for the i386 says that records and unions are returned
+    in memory.  */
+ #undef DEFAULT_PCC_STRUCT_RETURN
+ #define DEFAULT_PCC_STRUCT_RETURN 1
+ 
+ #undef ASM_COMMENT_START
+ #define ASM_COMMENT_START " #"
+ 
+ /* This is how to output an element of a case-vector that is relative.
+    This is only used for PIC code.  See comments by the `casesi' insn in
+    i386.md for an explanation of the expression this outputs. */
+ #undef ASM_OUTPUT_ADDR_DIFF_ELT
+ #define ASM_OUTPUT_ADDR_DIFF_ELT(FILE, BODY, VALUE, REL) \
+   fprintf (FILE, "\t.long _GLOBAL_OFFSET_TABLE_+[.-%s%d]\n", LPREFIX, VALUE)
+ 
+ /* Indicate that jump tables go in the text section.  This is
+    necessary when compiling PIC code.  */
+ #define JUMP_TABLES_IN_TEXT_SECTION (flag_pic)
+ 
+ /* Copy this from the svr4 specifications... */
+ /* Define the register numbers to be used in Dwarf debugging information.
+    The SVR4 reference port C compiler uses the following register numbers
+    in its Dwarf output code:
+ 	0 for %eax (gnu regno = 0)
+ 	1 for %ecx (gnu regno = 2)
+ 	2 for %edx (gnu regno = 1)
+ 	3 for %ebx (gnu regno = 3)
+ 	4 for %esp (gnu regno = 7)
+ 	5 for %ebp (gnu regno = 6)
+ 	6 for %esi (gnu regno = 4)
+ 	7 for %edi (gnu regno = 5)
+    The following three DWARF register numbers are never generated by
+    the SVR4 C compiler or by the GNU compilers, but SDB on x86/svr4
+    believes these numbers have these meanings.
+ 	8  for %eip    (no gnu equivalent)
+ 	9  for %eflags (no gnu equivalent)
+ 	10 for %trapno (no gnu equivalent)
+    It is not at all clear how we should number the FP stack registers
+    for the x86 architecture.  If the version of SDB on x86/svr4 were
+    a bit less brain dead with respect to floating-point then we would
+    have a precedent to follow with respect to DWARF register numbers
+    for x86 FP registers, but the SDB on x86/svr4 is so completely
+    broken with respect to FP registers that it is hardly worth thinking
+    of it as something to strive for compatibility with.
+    The version of x86/svr4 SDB I have at the moment does (partially)
+    seem to believe that DWARF register number 11 is associated with
+    the x86 register %st(0), but that's about all.  Higher DWARF
+    register numbers don't seem to be associated with anything in
+    particular, and even for DWARF regno 11, SDB only seems to under-
+    stand that it should say that a variable lives in %st(0) (when
+    asked via an `=' command) if we said it was in DWARF regno 11,
+    but SDB still prints garbage when asked for the value of the
+    variable in question (via a `/' command).
+    (Also note that the labels SDB prints for various FP stack regs
+    when doing an `x' command are all wrong.)
+    Note that these problems generally don't affect the native SVR4
+    C compiler because it doesn't allow the use of -O with -g and
+    because when it is *not* optimizing, it allocates a memory
+    location for each floating-point variable, and the memory
+    location is what gets described in the DWARF AT_location
+    attribute for the variable in question.
+    Regardless of the severe mental illness of the x86/svr4 SDB, we
+    do something sensible here and we use the following DWARF
+    register numbers.  Note that these are all stack-top-relative
+    numbers.
+ 	11 for %st(0) (gnu regno = 8)
+ 	12 for %st(1) (gnu regno = 9)
+ 	13 for %st(2) (gnu regno = 10)
+ 	14 for %st(3) (gnu regno = 11)
+ 	15 for %st(4) (gnu regno = 12)
+ 	16 for %st(5) (gnu regno = 13)
+ 	17 for %st(6) (gnu regno = 14)
+ 	18 for %st(7) (gnu regno = 15)
+ */
+ #undef DBX_REGISTER_NUMBER
+ #define DBX_REGISTER_NUMBER(n) \
+ ((n) == 0 ? 0 \
+  : (n) == 1 ? 2 \
+  : (n) == 2 ? 1 \
+  : (n) == 3 ? 3 \
+  : (n) == 4 ? 6 \
+  : (n) == 5 ? 7 \
+  : (n) == 6 ? 5 \
+  : (n) == 7 ? 4 \
+  : ((n) >= FIRST_STACK_REG && (n) <= LAST_STACK_REG) ? (n)+3 \
+  : (-1))
+ 
+ /* Output assembler code to FILE to increment profiler label # LABELNO
+    for profiling a function entry.  */
+ 
+ #undef FUNCTION_PROFILER
+ #define FUNCTION_PROFILER(FILE, LABELNO)  \
+ {									\
+   if (flag_pic)								\
+     {									\
+       fprintf (FILE, "\tleal %sP%d@GOTOFF(%%ebx),%%edx\n",		\
+ 	       LPREFIX, (LABELNO));					\
+       fprintf (FILE, "\tcall *mcount@GOT(%%ebx)\n");			\
+     }									\
+   else									\
+     {									\
+       fprintf (FILE, "\tmovl $%sP%d,%%edx\n", LPREFIX, (LABELNO));	\
+       fprintf (FILE, "\tcall mcount\n");				\
+     }									\
+ }
+ 
+ #undef SIZE_TYPE
+ #define SIZE_TYPE "long unsigned int"
+  
+ #undef PTRDIFF_TYPE
+ #define PTRDIFF_TYPE "long int"
+   
+ #undef WCHAR_TYPE
+ #define WCHAR_TYPE "short unsigned int"
+    
+ #undef WCHAR_UNSIGNED
+ #define WCHAR_UNSIGNED 1
+ 
+ #undef WCHAR_TYPE_SIZE
+ #define WCHAR_TYPE_SIZE 16
+     
+ #undef CPP_PREDEFINES
+ #define CPP_PREDEFINES "-D__ELF__ -D__BEOS__ -D__INTEL__ -D_X86_=1 \
+ -D__stdcall=__attribute__((__stdcall__)) \
+ -D__cdecl=__attribute__((__cdecl__)) \
+ -D__declspec(x)=__attribute__((x)) \
+ -Asystem(beos)"
+ 
+ #undef CPP_SPEC
+ #define CPP_SPEC "%(cpp_cpu) %{!no-fPIC:%{!no-fpic:-D__PIC__ -D__pic__}}"
+ 
+ /* BeOS uses lots of multichars, so don't warn about them unless the
+    user explicitly asks for the warnings with -Wmultichar.  Note that
+    CC1_SPEC is used for both cc1 and cc1plus. */
+ 
+ #undef CC1_SPEC
+ #define CC1_SPEC "%{!no-fpic:%{!fPIC:-fpic}} %{!Wmultichar: -Wno-multichar} %(cc1_cpu) %{profile:-p}"
+ 
+ #undef CC1PLUS_SPEC
+ #define CC1PLUS_SPEC "%{!Wctor-dtor-privacy:-Wno-ctor-dtor-privacy}"
+ 
+ /* Provide a LINK_SPEC appropriate for BeOS.  Here we provide support
+    for the special GCC options -static and -shared, which allow us to
+    link things in one of these three modes by applying the appropriate
+    combinations of options at link-time. */
+ 
+ /* If ELF is the default format, we should not use /lib/elf. */
+ 
+ #undef	LINK_SPEC
+ #define LINK_SPEC "%{!o*:-o %b} -m elf_i386_be -shared -Bsymbolic %{nostart:-e 0}"
+ 
+ /* Provide start and end file specs appropriate to glibc.  */
+ 
+ /* LIB_SPEC for BeOS */
+ #undef LIB_SPEC
+ #define LIB_SPEC "-lnet -lroot"
+ 
+ /* gcc runtime lib is built into libroot.so on BeOS */
+ /* ??? This is gonna be lovely when the next release of gcc has 
+    some new symbol in, so that links start failing.  */
+ #undef LIBGCC_SPEC
+ #define LIBGCC_SPEC ""
+ 
+ #undef  STARTFILE_SPEC
+ #define STARTFILE_SPEC "crti.o%s crtbegin.o%s %{!nostart:start_dyn.o%s} init_term_dyn.o%s %{p:i386-mcount.o%s}"
+ 
+ #undef  ENDFILE_SPEC
+ #define ENDFILE_SPEC "crtend.o%s crtn.o%s"
+ 
+ /* Get perform_* macros to build libgcc.a.  */
+ #include "i386/perform.h"
+ 
+ /* A C statement (sans semicolon) to output to the stdio stream
+    FILE the assembler definition of uninitialized global DECL named
+    NAME whose size is SIZE bytes and alignment is ALIGN bytes.
+    Try to use asm_output_aligned_bss to implement this macro.  */
+ 
+ #define ASM_OUTPUT_ALIGNED_BSS(FILE, DECL, NAME, SIZE, ALIGN) \
+   asm_output_aligned_bss (FILE, DECL, NAME, SIZE, ALIGN)
+ 
+ /* A C statement to output to the stdio stream FILE an assembler
+    command to advance the location counter to a multiple of 1<<LOG
+    bytes if it is within MAX_SKIP bytes.
+ 
+    This is used to align code labels according to Intel recommendations.  */
+ 
+ #ifdef HAVE_GAS_MAX_SKIP_P2ALIGN
+ #define ASM_OUTPUT_MAX_SKIP_ALIGN(FILE,LOG,MAX_SKIP) \
+   if ((LOG)!=0) \
+     if ((MAX_SKIP)==0) fprintf ((FILE), "\t.p2align %d\n", (LOG)); \
+     else fprintf ((FILE), "\t.p2align %d,,%d\n", (LOG), (MAX_SKIP))
+ #endif
+ 
+ /*
+  * Support for __declspec(dllimport) & __declspec(dllexport).
+  */
+ 
+ /* We don't care about dllimport.  */
+ 
+ #define TARGET_NOP_FUN_DLLIMPORT 1
+ 
+ /* A C expression whose value is nonzero if IDENTIFIER with arguments ARGS
+    is a valid machine specific attribute for DECL.
+    The attributes in ATTRIBUTES have previously been assigned to DECL.  */
+ 
+ #undef VALID_MACHINE_DECL_ATTRIBUTE
+ #define VALID_MACHINE_DECL_ATTRIBUTE(DECL, ATTRIBUTES, IDENTIFIER, ARGS) \
+   i386_pe_valid_decl_attribute_p (DECL, ATTRIBUTES, IDENTIFIER, ARGS)
+ extern int i386_pe_valid_decl_attribute_p ();
+ 
+ /* A C expression whose value is nonzero if IDENTIFIER with arguments ARGS
+    is a valid machine specific attribute for TYPE.
+    The attributes in ATTRIBUTES have previously been assigned to TYPE.  */
+ 
+ #undef VALID_MACHINE_TYPE_ATTRIBUTE
+ #define VALID_MACHINE_TYPE_ATTRIBUTE(TYPE, ATTRIBUTES, IDENTIFIER, ARGS) \
+   i386_pe_valid_type_attribute_p (TYPE, ATTRIBUTES, IDENTIFIER, ARGS)
+ extern int i386_pe_valid_type_attribute_p ();
+ 
+ #define MERGE_MACHINE_DECL_ATTRIBUTES(OLD, NEW) \
+   i386_pe_merge_decl_attributes ((OLD), (NEW))
+ extern union tree_node *i386_pe_merge_decl_attributes ();
+ 
+ /* Used to implement dllexport overriding dllimport semantics.  It's also used
+    to handle vtables - the first pass won't do anything because
+    DECL_CONTEXT (DECL) will be 0 so i386_pe_dll{ex,im}port_p will return 0.
+    It's also used to handle dllimport override semantics.  */
+ #if 0
+ #define REDO_SECTION_INFO_P(DECL) \
+   ((DECL_MACHINE_ATTRIBUTES (DECL) != NULL_TREE) \
+    || (TREE_CODE (DECL) == VAR_DECL && DECL_VIRTUAL_P (DECL)))
+ #else
+ #define REDO_SECTION_INFO_P(DECL) 1
+ #endif
+ 
+ /* Used only here locally.  If the decl has been exported, emit the 
+    necessary assembly.  */
+ 
+ #define ASM_EXPORT_DECL(FILE, NAME, DECL)				\
+   do {									\
+     if ((DECL) && i386_pe_dllexport_p (DECL))				\
+       {									\
+ 	fprintf ((FILE), ".section .exports\n");			\
+ 	fprintf ((FILE), "\t%s\t\"", STRING_ASM_OP);			\
+         assemble_name (FILE, NAME);					\
+ 	fprintf ((FILE), "\"\n.previous\n");				\
+       }									\
+   } while (0)
+ 
+ /* Write the extra assembler code needed to declare a function properly.
+    Some svr4 assemblers need to also have something extra said about the
+    function's return value.  We allow for that here.  */
+ 
+ #undef ASM_DECLARE_FUNCTION_NAME
+ #define ASM_DECLARE_FUNCTION_NAME(FILE, NAME, DECL)			\
+   do {									\
+     ASM_EXPORT_DECL(FILE, NAME, DECL);					\
+     fprintf (FILE, "\t%s\t ", TYPE_ASM_OP);				\
+     assemble_name (FILE, NAME);						\
+     putc (',', FILE);							\
+     fprintf (FILE, TYPE_OPERAND_FMT, "function");			\
+     putc ('\n', FILE);							\
+     ASM_DECLARE_RESULT (FILE, DECL_RESULT (DECL));			\
+     ASM_OUTPUT_LABEL(FILE, NAME);					\
+   } while (0)
+ 
+ /* Write the extra assembler code needed to declare an object properly.  */
+ 
+ #undef ASM_DECLARE_OBJECT_NAME
+ #define ASM_DECLARE_OBJECT_NAME(FILE, NAME, DECL)			\
+   do {									\
+     ASM_EXPORT_DECL(FILE, NAME, DECL);					\
+     fprintf (FILE, "\t%s\t ", TYPE_ASM_OP);				\
+     assemble_name (FILE, NAME);						\
+     putc (',', FILE);							\
+     fprintf (FILE, TYPE_OPERAND_FMT, "object");				\
+     putc ('\n', FILE);							\
+     size_directive_output = 0;						\
+     if (!flag_inhibit_size_directive && DECL_SIZE (DECL))		\
+       {									\
+         size_directive_output = 1;					\
+         fprintf (FILE, "\t%s\t ", SIZE_ASM_OP);				\
+         assemble_name (FILE, NAME);					\
+         putc (',', FILE);						\
+         fprintf (FILE, HOST_WIDE_INT_PRINT_DEC,				\
+                  int_size_in_bytes (TREE_TYPE (DECL)));			\
+         fputc ('\n', FILE);						\
+       }									\
+     ASM_OUTPUT_LABEL(FILE, NAME);					\
+   } while (0)
+ 
+ /* Similarly for COMMON symbols.  */
+ 
+ #undef ASM_OUTPUT_ALIGNED_COMMON
+ #undef ASM_OUTPUT_ALIGNED_DECL_COMMON
+ #define ASM_OUTPUT_ALIGNED_DECL_COMMON(FILE, DECL, NAME, SIZE, ALIGN)	\
+   do {									\
+     ASM_EXPORT_DECL(FILE, NAME, DECL);					\
+     fprintf ((FILE), "\t%s\t", COMMON_ASM_OP);				\
+     assemble_name ((FILE), (NAME));					\
+     fprintf ((FILE), ",%u,%u\n", (SIZE), (ALIGN) / BITS_PER_UNIT);	\
+   } while (0)
+ 
+ #undef ASM_OUTPUT_ALIGNED_LOCAL
+ #undef ASM_OUTPUT_ALIGNED_DECL_LOCAL
+ #define ASM_OUTPUT_ALIGNED_DECL_LOCAL(FILE, DECL, NAME, SIZE, ALIGN)	     \
+   do {									     \
+     fprintf ((FILE), "\t%s\t", LOCAL_ASM_OP);				     \
+     assemble_name ((FILE), (NAME));					     \
+     fprintf ((FILE), "\n");						     \
+     ASM_OUTPUT_ALIGNED_DECL_COMMON((FILE), (DECL), (NAME), (SIZE), (ALIGN)); \
+   } while (0)
+ 
+ /* This macro gets just the user-specified name out of the string in a
+    SYMBOL_REF.  Discard trailing @[NUM] encoded by ENCODE_SECTION_INFO.  */
+ /* Unused except to let winnt.c compile.  */
+ 
+ #undef  STRIP_NAME_ENCODING
+ #define STRIP_NAME_ENCODING(VAR,SYMBOL_NAME) ((VAR) = (SYMBOL_NAME))
+ 
+ /* In the current BeOS release (DR9), use of gcc's builtin alloca is a
+    problem because of the relatively low default stack size of 256K with no
+    way to expand it.  So anything we compile for the BeOS target should not
+    use the builtin alloca.  Defining SMALL_STACK disables builtin alloca.
+ 
+    Update: With r4.1b3 the default stack size for single threaded programs
+    is now 1Mb, which is plenty for bootstrapping gcc and all but the most
+    pathological stack abusers.  So we can turn this back on.  It is a huge
+    performance win for the tools. -fnf */
+ 
+ #undef SMALL_STACK
+ 
+ /* For native compiler, use standard BeOS include file search paths
+    rooted in /boot/develop/headers.  For a cross compiler, don't
+    expect the host to use the BeOS directory scheme, and instead look
+    for the BeOS include files relative to TOOL_INCLUDE_DIR.  Yes, we
+    use ANSI string concatenation here (FIXME) */
+ 
+ #ifndef CROSS_COMPILE
+ #undef INCLUDE_DEFAULTS
+ #define INCLUDE_DEFAULTS \
+     { \
+     { GPLUSPLUS_INCLUDE_DIR, "G++", 1, 1 },\
+     { GCC_INCLUDE_DIR, "GCC", 0, 0 },\
+     { TOOL_INCLUDE_DIR, "BINUTILS", 0, 1}, \
+     { "/boot/develop/headers/be/add-ons/graphics", 0, 0, 0 },\
+     { "/boot/develop/headers/be/devel", 0, 0, 0 },\
+     { "/boot/develop/headers/be/translation", 0, 0, 0 },\
+     { "/boot/develop/headers/be/mail", 0, 0, 0 },\
+     { "/boot/develop/headers/gnu", 0, 0, 0 },\
+     { "/boot/develop/headers/be/drivers", 0, 0, 0 },\
+     { "/boot/develop/headers/be/opengl", 0, 0, 0 },\
+     { "/boot/develop/headers/be/game", 0, 0, 0 },\
+     { "/boot/develop/headers/be/support", 0, 0, 0 },\
+     { "/boot/develop/headers/be/storage", 0, 0, 0 },\
+     { "/boot/develop/headers/be/kernel", 0, 0, 0 },\
+     { "/boot/develop/headers/be/net", 0, 0, 0 },\
+     { "/boot/develop/headers/be/midi", 0, 0, 0 },\
+     { "/boot/develop/headers/be/midi2", 0, 0, 0 },\
+     { "/boot/develop/headers/be/media", 0, 0, 0 },\
+     { "/boot/develop/headers/be/interface", 0, 0, 0 },\
+     { "/boot/develop/headers/be/device", 0, 0, 0 },\
+     { "/boot/develop/headers/be/app", 0, 0, 0 },\
+     { "/boot/develop/headers/be/precompiled", 0, 0, 0 },\
+     { "/boot/develop/headers/be/add-ons/input_server", 0, 0, 0 },\
+     { "/boot/develop/headers/be/add-ons/net_server", 0, 0, 0 },\
+     { "/boot/develop/headers/be/add-ons/screen_saver", 0, 0, 0 },\
+     { "/boot/develop/headers/be/add-ons/tracker", 0, 0, 0 },\
+     { "/boot/develop/headers/be/be_apps/Deskbar", 0, 0, 0 },\
+     { "/boot/develop/headers/be/be_apps/NetPositive", 0, 0, 0 },\
+     { "/boot/develop/headers/be/be_apps/Tracker", 0, 0, 0 },\
+     { "/boot/develop/headers/be/drivers/tty", 0, 0, 0 },\
+     { "/boot/develop/headers/be/net/netinet", 0, 0, 0 },\
+     { "/boot/develop/headers/be/storage", 0, 0, 0 },\
+     { "/boot/develop/headers/be", 0, 0, 0 },\
+     { "/boot/develop/headers/posix", 0, 0, 0 },\
+     { "/boot/develop/headers", 0, 0, 0 }, \
+     { 0, 0, 0, 0 } \
+     };
+ #else /* CROSS_COMPILE */
+ #undef	INCLUDE_DEFAULTS
+ #define INCLUDE_DEFAULTS				\
+     { \
+     { GPLUSPLUS_INCLUDE_DIR, "G++", 1, 1 },\
+     { GCC_INCLUDE_DIR, "GCC", 0, 0 },\
+     { TOOL_INCLUDE_DIR, "BINUTILS", 0, 1}, \
+     { CROSS_INCLUDE_DIR "/be/add-ons/graphics", 0, 0, 0 },\
+     { CROSS_INCLUDE_DIR "/be/devel", 0, 0, 0 },\
+     { CROSS_INCLUDE_DIR "/be/translation", 0, 0, 0 },\
+     { CROSS_INCLUDE_DIR "/be/mail", 0, 0, 0 },\
+     { CROSS_INCLUDE_DIR "/gnu", 0, 0, 0 },\
+     { CROSS_INCLUDE_DIR "/be/drivers", 0, 0, 0 },\
+     { CROSS_INCLUDE_DIR "/be/opengl", 0, 0, 0 },\
+     { CROSS_INCLUDE_DIR "/be/game", 0, 0, 0 },\
+     { CROSS_INCLUDE_DIR "/be/support", 0, 0, 0 },\
+     { CROSS_INCLUDE_DIR "/be/storage", 0, 0, 0 },\
+     { CROSS_INCLUDE_DIR "/be/kernel", 0, 0, 0 },\
+     { CROSS_INCLUDE_DIR "/be/net", 0, 0, 0 },\
+     { CROSS_INCLUDE_DIR "/be/midi", 0, 0, 0 },\
+     { CROSS_INCLUDE_DIR "/be/midi2", 0, 0, 0 },\
+     { CROSS_INCLUDE_DIR "/be/media", 0, 0, 0 },\
+     { CROSS_INCLUDE_DIR "/be/interface", 0, 0, 0 },\
+     { CROSS_INCLUDE_DIR "/be/device", 0, 0, 0 },\
+     { CROSS_INCLUDE_DIR "/be/app", 0, 0, 0 },\
+     { CROSS_INCLUDE_DIR "/be/precompiled", 0, 0, 0 },\
+     { CROSS_INCLUDE_DIR "/be/add-ons/input_server", 0, 0, 0 },\
+     { CROSS_INCLUDE_DIR "/be/add-ons/net_server", 0, 0, 0 },\
+     { CROSS_INCLUDE_DIR "/be/add-ons/screen_saver", 0, 0, 0 },\
+     { CROSS_INCLUDE_DIR "/be/add-ons/tracker", 0, 0, 0 },\
+     { CROSS_INCLUDE_DIR "/be/be_apps/Deskbar", 0, 0, 0 },\
+     { CROSS_INCLUDE_DIR "/be/be_apps/NetPositive", 0, 0, 0 },\
+     { CROSS_INCLUDE_DIR "/be/be_apps/Tracker", 0, 0, 0 },\
+     { CROSS_INCLUDE_DIR "/be/drivers/tty", 0, 0, 0 },\
+     { CROSS_INCLUDE_DIR "/be/net/netinet", 0, 0, 0 },\
+     { CROSS_INCLUDE_DIR "/be/storage", 0, 0, 0 },\
+     { CROSS_INCLUDE_DIR "/be", 0, 0, 0 },\
+     { CROSS_INCLUDE_DIR "/posix", 0, 0, 0 },\
+     { CROSS_INCLUDE_DIR , 0, 0, 0 }, \
+     { 0, 0, 0, 0 } \
+     };
+ #endif
+ 
+ /* Whee.  LIBRARY_PATH is Be's LD_LIBRARY_PATH, which of course will
+    cause nasty problems if we override it.  */
+ #define LIBRARY_PATH_ENV        "BELIBRARIES"
+ 
+ /* BeOS doesn't have a separate math library.  */
+ #define MATH_LIBRARY ""
+ 
+ /* BeOS headers are C++-aware (and often use C++).  */
+ #define NO_IMPLICIT_EXTERN_C
+ 
+ /* Define this macro if in some cases global symbols from one translation
+    unit may not be bound to undefined symbols in another translation unit
+    without user intervention.  For instance, under Microsoft Windows
+    symbols must be explicitly imported from shared libraries (DLLs).  */
+ #define MULTIPLE_SYMBOL_SPACES
+ 
+ /* A C statement to output assembler commands which will identify the object
+    file as having been compiled with GNU CC.  This isn't needed for BeOS
+    because we use DWARF and DWARF has an DW_AT_producer tag that does the
+    same thing.  Gdb is probably the only debugger that uses this anyway,
+    so the most likely ill effect of disabling this is that a BeOS gdb
+    debugging an executable with no debug info would not see the gcc2_compiled
+    label. */
+ #undef ASM_IDENTIFY_GCC
+ #define ASM_IDENTIFY_GCC(FILE) 
+ 
+ #define I386_PE_STRIP_ENCODING(SYM_NAME) \
+   ((SYM_NAME) + ((SYM_NAME)[0] == '@' ? 3 : 0))
+ 
+ #define DRECTVE_SECTION_FUNCTION \
+ void									\
+ drectve_section ()							\
+ {									\
+   if (in_section != in_drectve)						\
+     {									\
+       fprintf (asm_out_file, "%s\n", "\t.section .drectve\n");		\
+       in_section = in_drectve;						\
+     }									\
+ }
+ 
+ #undef EXTRA_SECTION_FUNCTIONS
+ #define EXTRA_SECTION_FUNCTIONS						\
+   CONST_SECTION_FUNCTION						\
+   CTORS_SECTION_FUNCTION						\
+   DTORS_SECTION_FUNCTION						\
+   DRECTVE_SECTION_FUNCTION
+ 
+ #undef EXTRA_SECTIONS
+ #define EXTRA_SECTIONS in_const, in_ctors, in_dtors, in_drectve
diff -cNr gcc-2.95.3/gcc/config/i386/beos-pe.h gcc-2.95.3-beos/gcc/config/i386/beos-pe.h
*** gcc-2.95.3/gcc/config/i386/beos-pe.h	Thu Jan  1 09:00:00 1970
--- gcc-2.95.3-beos/gcc/config/i386/beos-pe.h	Fri Apr  6 06:35:03 2001
***************
*** 0 ****
--- 1,127 ----
+ /* Operating system specific defines for BeOS target.
+    Copyright (C) 1995, 1996, 1997 Free Software Foundation, Inc.
+    Contributed by Fred Fish (fnf@cygnus.com), based on cygwin32.h.
+ 
+ This file is part of GNU CC.
+ 
+ GNU CC is free software; you can redistribute it and/or modify
+ it under the terms of the GNU General Public License as published by
+ the Free Software Foundation; either version 2, or (at your option)
+ any later version.
+ 
+ GNU CC is distributed in the hope that it will be useful,
+ but WITHOUT ANY WARRANTY; without even the implied warranty of
+ MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ GNU General Public License for more details.
+ 
+ You should have received a copy of the GNU General Public License
+ along with GNU CC; see the file COPYING.  If not, write to
+ the Free Software Foundation, 59 Temple Place - Suite 330,
+ Boston, MA 02111-1307, USA. */
+ 
+ 
+ /* Get all the PE support related things.  */
+ #include "cygwin32.h"
+ 
+ /* Change debugging to Dwarf2.  */
+ #undef SDB_DEBUGGING_INFO
+ #undef DBX_DEBUGGING_INFO
+ #define DWARF2_DEBUGGING_INFO
+ #undef PREFERRED_DEBUGGING_TYPE
+ #define PREFERRED_DEBUGGING_TYPE DWARF2_DEBUG
+ 
+ /* Support the __declspec keyword by turning them into attributes.
+    We currently only support: dllimport and dllexport.
+    Note that the current way we do this may result in a collision with
+    predefined attributes later on.  This can be solved by using one attribute,
+    say __declspec__, and passing args to it.  The problem with that approach
+    is that args are not accumulated: each new appearance would clobber any
+    existing args.  */
+ 
+ #undef CPP_PREDEFINES
+ #define CPP_PREDEFINES "-D__BEOS__ -D__INTEL__ -Di386 -D_X86_=1 \
+ -D__stdcall=__attribute__((__stdcall__)) \
+ -D__cdecl=__attribute__((__cdecl__)) \
+ -D__declspec(x)=__attribute__((x)) \
+ -Asystem(beos) -Acpu(i386) -Amachine(i386)"
+ 
+ #undef CPP_SPEC
+ #define CPP_SPEC "-remap %(cpp_cpu) %{posix:-D_POSIX_SOURCE}"
+ 
+ #undef LIB_SPEC
+ #define LIB_SPEC "-lroot -lbe -ltracker -lmedia -lnet -lnetdev -ldevice -lmidi -lgame -latalk -lmail"
+ 
+ #undef STARTFILE_SPEC
+ #define STARTFILE_SPEC "/boot/develop/lib/x86/start_dyn.o /boot/develop/lib/x86/init_term_dyn.o /boot/develop/lib/x86/glue-noinit.a"
+ 
+ /* Temporary. */
+ #define LINKERSCRIPT_SPEC "%{!T:-Tbeos.ld}"
+ 
+ /* No math library. */
+ #define MATH_LIBRARY ""
+ 
+ /* Don't ignore dllimport for functions.  */
+ #undef TARGET_NOP_FUN_DLLIMPORT
+ #define TARGET_NOP_FUN_DLLIMPORT 0
+ 
+ #undef SUBTARGET_SWITCHES
+ #define SUBTARGET_SWITCHES
+ 
+ /* Disable DWARF2 unwind info; this doesn't appear to work on
+    COFF-based targets right now. (I want to say "duh?" but someone
+    will correct me later. */
+ 
+ #undef INCOMING_RETURN_ADDR_RTX
+ #undef DWARF2_UNWIND_INFO
+ 
+ /* This is the easiest way to disable use of gcc's builtin alloca,
+    which in the current BeOS release (DR9) is a problem because of the
+    relatively low default stack size of 256K with no way to expand it.
+    So anything we compile for the BeOS target should not use the
+    builtin alloca.  This also has the unwanted side effect of
+    disabling all builtin functions though. */
+ /* ??? Someone should explain to me why this is desired.  Sure, we can't
+    allocate hordes of space, and so we use CALLOCA for building gcc, but
+    this also means I can't allocate a couple hundred bytes for string
+    manipulation either.  */
+ 
+ #undef CC1_SPEC
+ #define CC1_SPEC "%{!fbuiltin: -fno-builtin}"
+ #undef CC1PLUS_SPEC
+ #define CC1PLUS_SPEC "%{!fbuiltin: -fno-builtin}"
+ 
+ /* Yuck. */
+ #ifndef CROSS_COMPILE
+ #undef INCLUDE_DEFAULTS
+ #define INCLUDE_DEFAULTS \
+     { \
+     { GPLUSPLUS_INCLUDE_DIR, "G++", 1, 1 },\
+     { GCC_INCLUDE_DIR, "GCC", 0, 0 },\
+     { TOOL_INCLUDE_DIR, "BINUTILS", 0, 1}, \
+     { "/boot/develop/headers/be/add-ons/graphics", 0, 0, 0 },\
+     { "/boot/develop/headers/be/translation", 0, 0, 0 },\
+     { "/boot/develop/headers/be/mail", 0, 0, 0 },\
+     { "/boot/develop/headers/gnu", 0, 0, 0 },\
+     { "/boot/develop/headers/be/drivers", 0, 0, 0 },\
+     { "/boot/develop/headers/be/game", 0, 0, 0 },\
+     { "/boot/develop/headers/be/support", 0, 0, 0 },\
+     { "/boot/develop/headers/be/storage", 0, 0, 0 },\
+     { "/boot/develop/headers/be/kernel", 0, 0, 0 },\
+     { "/boot/develop/headers/be/net", 0, 0, 0 },\
+     { "/boot/develop/headers/be/midi", 0, 0, 0 },\
+     { "/boot/develop/headers/be/media", 0, 0, 0 },\
+     { "/boot/develop/headers/be/interface", 0, 0, 0 },\
+     { "/boot/develop/headers/be/device", 0, 0, 0 },\
+     { "/boot/develop/headers/be/app", 0, 0, 0 },\
+     { "/boot/develop/headers/cpp", 0, 0, 0 },\
+     { "/boot/develop/headers/posix", 0, 0, 0 },\
+     { "/boot/develop/headers/be/precompiled", 0, 0, 0 },\
+     { "/boot/develop/headers/be", 0, 0, 0 },\
+     { "/boot/develop/headers", 0, 0, 0 }, \
+     { 0, 0, 0, 0 } \
+     };
+ #endif
+ 
+ /* Whee.  LIBRARY_PATH is Be's LD_LIBRARY_PATH, which of course will
+    cause nasty problems if we override it.  */
+ #define LIBRARY_PATH_ENV	"BELIBRARIES"
diff -cNr gcc-2.95.3/gcc/config/i386/t-beos gcc-2.95.3-beos/gcc/config/i386/t-beos
*** gcc-2.95.3/gcc/config/i386/t-beos	Thu Jan  1 09:00:00 1970
--- gcc-2.95.3-beos/gcc/config/i386/t-beos	Fri Apr  6 06:35:03 2001
***************
*** 0 ****
--- 1,14 ----
+ # Do not build libgcc1.
+ LIBGCC1 =
+ CROSS_LIBGCC1 =
+ 
+ # There are system headers elsewhere, but these are the ones that
+ # we are most likely to want to apply any fixes to.
+ SYSTEM_HEADER_DIR = /boot/develop/headers/posix
+ CROSS_SYSTEM_HEADER_DIR := $(CROSS_SYSTEM_HEADER_DIR)/posix
+ 
+ # Use the system assert.h
+ INSTALL_ASSERT_H =
+ 
+ winnt.o: $(srcdir)/config/i386/winnt.c
+ 	$(CC) -c $(ALL_CFLAGS) $(ALL_CPPFLAGS) $(INCLUDES) $(srcdir)/config/i386/winnt.c
diff -cNr gcc-2.95.3/gcc/config/i386/x-beos gcc-2.95.3-beos/gcc/config/i386/x-beos
*** gcc-2.95.3/gcc/config/i386/x-beos	Thu Jan  1 09:00:00 1970
--- gcc-2.95.3-beos/gcc/config/i386/x-beos	Fri Apr  6 06:35:03 2001
***************
*** 0 ****
--- 1,9 ----
+ # configuration for BeOS
+ INSTALL=install -c
+ 
+ # Show we need to use the C version of ALLOCA
+ ALLOCA=alloca.o
+ # Use it regardless of whether we are compiling with gcc or not.
+ USE_ALLOCA= `echo "${ALLOCA}"`
+ USE_HOST_ALLOCA= `echo ${HOST_PREFIX}${HOST_ALLOCA}`
+ SUBDIR_USE_ALLOCA = `if [ x$(ALLOCA) != x ]; then echo ../$(ALLOCA); else true; fi`
diff -cNr gcc-2.95.3/gcc/config/i386/xm-beos.h gcc-2.95.3-beos/gcc/config/i386/xm-beos.h
*** gcc-2.95.3/gcc/config/i386/xm-beos.h	Thu Jan  1 09:00:00 1970
--- gcc-2.95.3-beos/gcc/config/i386/xm-beos.h	Tue Apr 10 07:34:44 2001
***************
*** 0 ****
--- 1,83 ----
+ /* Configuration for GNU C-compiler for BeOS host.
+    Copyright (C) 1997, 1998 Free Software Foundation, Inc.
+    Contributed by Fred Fish (fnf@cygnus.com), based on xm-rs6000.h
+    by Richard Kenner (kenner@vlsi1.ultra.nyu.edu).
+ 
+ This file is part of GNU CC.
+ 
+ GNU CC is free software; you can redistribute it and/or modify
+ it under the terms of the GNU General Public License as published by
+ the Free Software Foundation; either version 2, or (at your option)
+ any later version.
+ 
+ GNU CC is distributed in the hope that it will be useful,
+ but WITHOUT ANY WARRANTY; without even the implied warranty of
+ MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ GNU General Public License for more details.
+ 
+ You should have received a copy of the GNU General Public License
+ along with GNU CC; see the file COPYING.  If not, write to
+ the Free Software Foundation, 59 Temple Place - Suite 330,
+ Boston, MA 02111-1307, USA.  */
+ 
+ #include <i386/xm-i386.h>
+ 
+ /* Arguments to use with `exit'.  */
+ 
+ #define	SUCCESS_EXIT_CODE	0
+ #define	FATAL_EXIT_CODE		33
+ 
+ /* Include <sys/wait.h> to define the exit status access macros.  */
+ #ifndef inhibit_libc
+ #include <sys/wait.h>
+ #endif
+ 
+ #define	ONLY_INT_FIELDS
+ 
+ /* use ANSI/SYSV style byte manipulation routines instead of BSD ones */
+ 
+ #undef bcopy
+ #define bcopy(s,d,n)	memmove((d),(s),(n))
+ #undef bzero
+ #define bzero(d,n)	memset((d),0,(n))
+ #undef bcmp
+ #define bcmp(l,r,n)	memcmp((l),(r),(n))
+ #undef index
+ #define index		strchr
+ #undef rindex
+ #define rindex		strrchr
+ 
+ /* BeOS is closer to USG than BSD */
+ 
+ #define USG
+ 
+ /* Define various things that the BeOS host has. */
+ 
+ #ifndef HAVE_VPRINTF
+ #define HAVE_VPRINTF
+ #endif
+ #ifndef HAVE_PUTENV
+ #define HAVE_PUTENV
+ #endif
+ #define HAVE_RENAME
+ 
+ #define STDC_HEADERS 1
+ 
+ #ifndef CROSS_COMPILE
+ /* Define this macro to make error messages always emit full paths.
+    This is needed so that error output parsing development environment
+    can unambiguously determine the source file with an error.  */
+ #define FULL_PATHS_IN_ERRORS 1
+ #endif
+ 
+ #ifndef LIBRARY_PATH_ENV
+ /* If we don't define this, LIBRARY_PATH will be overwritten and
+    the execution of collect2 will be failed. */
+ #define LIBRARY_PATH_ENV	"BELIBRARIES"
+ #endif
+ 
+ /* The origin of BeOS's gcc is egcs 1.1.x, and these version had a bug
+    in mangled name builder. The APIs of BeOS are furnished to the
+    developers as shared library of C++. And if we use fixed mangled
+    names in newer gcc, some APIs are hidden with name problem. */
+ #define USE_EGCS_MANGLED_NAMES
diff -cNr gcc-2.95.3/gcc/configure.in gcc-2.95.3-beos/gcc/configure.in
*** gcc-2.95.3/gcc/configure.in	Thu Jan 25 23:03:02 2001
--- gcc-2.95.3-beos/gcc/configure.in	Fri Apr  6 06:35:03 2001
***************
*** 1141,1146 ****
--- 1141,1167 ----
  		tmake_file=i386/t-i386bare
  		;;
  changequote(,)dnl
+ 	i[34567]86-*-beospe*)
+ changequote([,])dnl
+ 		xm_file=i386/xm-beos.h
+ 		xm_defines="USE_C_ALLOCA"
+ 		tmake_file=i386/t-beos
+ 		tm_file=i386/beos-pe.h
+ 		xmake_file=i386/x-beos
+ 		extra_objs=winnt.o
+ 		;;
+ changequote(,)dnl
+ 	i[34567]86-*-beoself* | i[34567]86-*-beos*)
+ changequote([,])dnl
+ 		xm_file=i386/xm-beos.h
+ 		tmake_file='i386/t-beos i386/t-crtpic'
+ 		tm_file=i386/beos-elf.h
+ 		xmake_file=i386/x-beos
+ 		extra_objs=winnt.o
+ 		extra_parts='crtbegin.o crtend.o'
+ 		fixincludes=Makefile.in
+ 		;;
+ changequote(,)dnl
  	i[34567]86-*-bsdi* | i[34567]86-*-bsd386*)
  changequote([,])dnl
  		tm_file=i386/bsd386.h
diff -cNr gcc-2.95.3/gcc/cp/method.c gcc-2.95.3-beos/gcc/cp/method.c
*** gcc-2.95.3/gcc/cp/method.c	Sat Jun 10 09:06:44 2000
--- gcc-2.95.3-beos/gcc/cp/method.c	Tue Apr 10 08:17:40 2001
***************
*** 317,323 ****
--- 317,327 ----
    /* The entry for this parm is at maxtype-1, so don't look there for
       something to repeat.  */
    for (tindex = 0; tindex < maxtype - 1; ++tindex)
+ #ifdef USE_EGCS_MANGLED_NAMES
+     if (typevec[tindex] == type)
+ #else /* USE_EGCS_MANGLED_NAMES */
      if (same_type_p (typevec[tindex], type))
+ #endif /* USE_EGCS_MANGLED_NAMES */
        break;
  
    if (tindex == maxtype - 1)
***************
*** 1176,1182 ****
--- 1180,1190 ----
  	      typevec[maxtype++] = parmtype;
  	    }
  
+ #ifdef USE_EGCS_MANGLED_NAMES
+ 	  if (last_type && (parmtype == last_type))
+ #else /* USE_EGCS_MANGLED_NAMES */
  	  if (last_type && same_type_p (parmtype, last_type))
+ #endif /* USE_EGCS_MANGLED_NAMES */
  	    {
  	      if (flag_do_squangling 
  		  || (old_style_repeats
diff -cNr gcc-2.95.3/gcc/fixinc/fixincl.c gcc-2.95.3-beos/gcc/fixinc/fixincl.c
*** gcc-2.95.3/gcc/fixinc/fixincl.c	Tue Jun  8 05:26:07 1999
--- gcc-2.95.3-beos/gcc/fixinc/fixincl.c	Wed Apr 11 08:17:45 2001
***************
*** 346,352 ****
--- 346,354 ----
    run_compiles ();
  
    signal (SIGQUIT, SIG_IGN);
+ #ifdef SIGIOT
    signal (SIGIOT,  SIG_IGN);
+ #endif
    signal (SIGPIPE, SIG_IGN);
    signal (SIGALRM, SIG_IGN);
    signal (SIGTERM, SIG_IGN);
diff -cNr gcc-2.95.3/gcc/gcc.c gcc-2.95.3-beos/gcc/gcc.c
*** gcc-2.95.3/gcc/gcc.c	Thu Jan 25 23:03:16 2001
--- gcc-2.95.3-beos/gcc/gcc.c	Fri Apr  6 06:35:03 2001
***************
*** 84,89 ****
--- 84,94 ----
  #define GET_ENV_PATH_LIST(VAR,NAME)	do { (VAR) = getenv (NAME); } while (0)
  #endif
  
+ /* Most every one is fine with LIBRARY_PATH.  For some, it conflicts.  */
+ #ifndef LIBRARY_PATH_ENV
+ #define LIBRARY_PATH_ENV "LIBRARY_PATH"
+ #endif
+ 
  #ifndef HAVE_KILL
  #define kill(p,s) raise(s)
  #endif
***************
*** 2657,2663 ****
  	}
      }
  
!   GET_ENV_PATH_LIST (temp, "LIBRARY_PATH");
    if (temp && *cross_compile == '0')
      {
        const char *startp, *endp;
--- 2661,2667 ----
  	}
      }
  
!   GET_ENV_PATH_LIST (temp, LIBRARY_PATH_ENV);
    if (temp && *cross_compile == '0')
      {
        const char *startp, *endp;
***************
*** 5127,5133 ****
        /* Rebuild the COMPILER_PATH and LIBRARY_PATH environment variables
  	 for collect.  */
        putenv_from_prefixes (&exec_prefixes, "COMPILER_PATH=");
!       putenv_from_prefixes (&startfile_prefixes, "LIBRARY_PATH=");
  
        value = do_spec (link_command_spec);
        if (value < 0)
--- 5131,5137 ----
        /* Rebuild the COMPILER_PATH and LIBRARY_PATH environment variables
  	 for collect.  */
        putenv_from_prefixes (&exec_prefixes, "COMPILER_PATH=");
!       putenv_from_prefixes (&startfile_prefixes, LIBRARY_PATH_ENV "=");
  
        value = do_spec (link_command_spec);
        if (value < 0)
diff -cNr gcc-2.95.3/gcc/ginclude/stdarg.h gcc-2.95.3-beos/gcc/ginclude/stdarg.h
*** gcc-2.95.3/gcc/ginclude/stdarg.h	Sat May  8 10:52:35 1999
--- gcc-2.95.3-beos/gcc/ginclude/stdarg.h	Fri Apr  6 06:35:03 2001
***************
*** 67,73 ****
  
  #ifndef __GNUC_VA_LIST
  #define __GNUC_VA_LIST
! #if defined(__svr4__) || defined(_AIX) || defined(_M_UNIX) || defined(__NetBSD__)
  typedef char *__gnuc_va_list;
  #else
  typedef void *__gnuc_va_list;
--- 67,73 ----
  
  #ifndef __GNUC_VA_LIST
  #define __GNUC_VA_LIST
! #if defined(__svr4__) || defined(_AIX) || defined(_M_UNIX) || defined(__NetBSD__) || defined(__BEOS__)
  typedef char *__gnuc_va_list;
  #else
  typedef void *__gnuc_va_list;
diff -cNr gcc-2.95.3/gcc/ginclude/stddef.h gcc-2.95.3-beos/gcc/ginclude/stddef.h
*** gcc-2.95.3/gcc/ginclude/stddef.h	Thu Dec 17 06:19:25 1998
--- gcc-2.95.3-beos/gcc/ginclude/stddef.h	Fri Apr  6 22:42:51 2001
***************
*** 245,255 ****
  #endif
  
  #ifndef __WCHAR_TYPE__
- #ifdef __BEOS__
- #define __WCHAR_TYPE__ unsigned char
- #else
  #define __WCHAR_TYPE__ int
- #endif
  #endif
  #ifndef __cplusplus
  typedef __WCHAR_TYPE__ wchar_t;
--- 245,251 ----
diff -cNr gcc-2.95.3/gcc/gthr-beos.h gcc-2.95.3-beos/gcc/gthr-beos.h
*** gcc-2.95.3/gcc/gthr-beos.h	Thu Jan  1 09:00:00 1970
--- gcc-2.95.3-beos/gcc/gthr-beos.h	Fri Apr  6 06:35:03 2001
***************
*** 0 ****
--- 1,87 ----
+ /* Threads compatibily routines for libgcc2.  */
+ /* Compile this one with gcc.  */
+ /* Copyright (C) 1997 Free Software Foundation, Inc.
+ 
+ This file is part of GNU CC.
+ 
+ GNU CC is free software; you can redistribute it and/or modify
+ it under the terms of the GNU General Public License as published by
+ the Free Software Foundation; either version 2, or (at your option)
+ any later version.
+ 
+ GNU CC is distributed in the hope that it will be useful,
+ but WITHOUT ANY WARRANTY; without even the implied warranty of
+ MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ GNU General Public License for more details.
+ 
+ You should have received a copy of the GNU General Public License
+ along with GNU CC; see the file COPYING.  If not, write to
+ the Free Software Foundation, 59 Temple Place - Suite 330,
+ Boston, MA 02111-1307, USA.  */
+ 
+ /* As a special exception, if you link this library with other files,
+    some of which are compiled with GCC, to produce an executable,
+    this library does not by itself cause the resulting executable
+    to be covered by the GNU General Public License.
+    This exception does not however invalidate any other reasons why
+    the executable file might be covered by the GNU General Public License.  */
+ 
+ #ifndef __gthr_beos_h
+ #define __gthr_beos_h
+ 
+ /* Simple spinlocks for mutex handling. We would need C++ for semaphores. */
+ 
+ /*	we do our own thread-safe implementation	*/
+ #define __GTHREADS 0
+ 
+ #if defined(MAX)
+ #undef MAX
+ #endif
+ #if defined(MIN)
+ #undef MIN
+ #endif
+ 
+ #include <OS.h>
+ 
+ typedef int32 __gthread_mutex_t;
+ 
+ #define __GTHREAD_MUTEX_INIT 0
+ 
+ static inline int
+ __gthread_active_p ()
+ {
+   return 1;
+ }
+ 
+ /*	the return value is not documented -- let's assume 0 for "no error"	*/
+ /*	the only user I found was in frame.c, which doesn't check...	*/
+ static inline int
+ __gthread_mutex_lock (__gthread_mutex_t *mutex)
+ {
+ 	while (atomic_or(mutex, 1)) {
+ 		snooze(3000);
+ 	}
+ 	return 0;
+ }
+ 
+ #if 0
+ //	This appears unused, so I will not implement it.
+ //	If it's needed later, we'll do it then.
+ static inline int
+ __gthread_mutex_trylock (__gthread_mutex_t *mutex __attribute__ ((__unused__)))
+ {
+   return 0;
+ }
+ #endif
+ 
+ /*	the return value is not documented -- let's assume 0 for "no error"	*/
+ /*	the only user I found was in frame.c, which doesn't check...	*/
+ static inline int
+ __gthread_mutex_unlock (__gthread_mutex_t *mutex)
+ {
+ 	/* assert(*mutex != 0); */
+ 	atomic_and(mutex, 0);
+ 	return 0;
+ }
+ 
+ #endif /* not __gthr_beos_h */
diff -cNr gcc-2.95.3/gcc/gthr.h gcc-2.95.3-beos/gcc/gthr.h
*** gcc-2.95.3/gcc/gthr.h	Thu Dec 17 05:56:42 1998
--- gcc-2.95.3-beos/gcc/gthr.h	Fri Apr  6 06:35:03 2001
***************
*** 87,92 ****
--- 87,94 ----
  #include "gthr-dce.h"
  #elif _SOLARIS_THREADS
  #include "gthr-solaris.h"
+ #elif __BEOS__
+ #include "gthr-beos.h"
  
  /* Include GTHREAD_FILE if one is defined. */
  #elif defined(HAVE_GTHR_DEFAULT)
diff -cNr gcc-2.95.3/gcc/libgcc2.c gcc-2.95.3-beos/gcc/libgcc2.c
*** gcc-2.95.3/gcc/libgcc2.c	Fri Jun 11 12:11:43 1999
--- gcc-2.95.3-beos/gcc/libgcc2.c	Fri Apr  6 06:35:03 2001
***************
*** 3116,3132 ****
    if (ptr)
      free (ptr);
  }
  #endif
  
  /* Pointer to function to return EH context. */
  
  static struct eh_context *eh_context_initialize ();
  static struct eh_context *eh_context_static ();
! #if __GTHREADS
  static struct eh_context *eh_context_specific ();
  #endif
  
  static struct eh_context *(*get_eh_context) () = &eh_context_initialize;
  
  /* Routine to get EH context.
     This one will simply call the function pointer. */
--- 3116,3141 ----
    if (ptr)
      free (ptr);
  }
+ 
+ /* __BEOS__ does not have a teardown toutine */
+ 
  #endif
  
  /* Pointer to function to return EH context. */
  
+ #if !__BEOS__
  static struct eh_context *eh_context_initialize ();
  static struct eh_context *eh_context_static ();
! #endif
! #if __GTHREADS || __BEOS__
  static struct eh_context *eh_context_specific ();
  #endif
  
+ #if __BEOS__
+ static struct eh_context *(*get_eh_context) () = &eh_context_specific;
+ #else
  static struct eh_context *(*get_eh_context) () = &eh_context_initialize;
+ #endif
  
  /* Routine to get EH context.
     This one will simply call the function pointer. */
***************
*** 3163,3168 ****
--- 3172,3178 ----
     This will be called only once, since we change GET_EH_CONTEXT
     pointer to another routine. */
  
+ #if !__BEOS__
  static struct eh_context *
  eh_context_initialize ()
  {
***************
*** 3207,3212 ****
--- 3217,3224 ----
    return &eh;
  }
  
+ #endif	/* __BEOS__ */
+ 
  #if __GTHREADS
  /* Return a thread specific EH context. */
  
***************
*** 3224,3229 ****
--- 3236,3298 ----
  
    return eh;
  }
+ #elif __BEOS__
+ 
+ static __gthread_mutex_t beos_throw_mutex = __GTHREAD_MUTEX_INIT;
+ 
+ typedef struct __beos_throw_info {
+   thread_id thread;
+   struct eh_context context;
+ } __beos_throw_info;
+ 
+ #define BEOS_THREAD_LIMIT 256	/* after this, we will leak */
+ 
+ static __beos_throw_info __beos_throw_table[BEOS_THREAD_LIMIT];	/* just some random limit */
+ 
+ static struct eh_context *
+ eh_context_specific()
+ {
+   int ix;
+   thread_id us = find_thread(NULL);
+   thread_info info;
+   struct eh_context *fallback = NULL;
+   __gthread_mutext_lock(&beos_throw_mutex);
+ 
+   /* find a slot reserved for us */
+   for (ix = 0; ix < BEOS_THREAD_LIMIT - 1; ix++) {
+     /* check whether we've gotten a slot before */
+     if (__beos_throw_table[ix].thread == us) {
+       __gthread_mutex_unlock(&beos_throw_mutex);
+       goto got_it;
+     }
+     /* check whether there's an unused slot */
+     if (__beos_throw_table[ix].thread == 0) {
+       __beos_throw_table[ix].thread = us;
+       __gthread_mutext_unlock(&beos_throw_mutex);
+       goto got_it;
+     }
+   }
+   /* If we hit BEOS_THREAD_LIMIT - 1, we have seen 256 threads, Try to clean up table. */
+   for (ix = 0; ix < BEOS_THREAD_LIMIT - 1; ix++) {
+     if (get_thread_info(__beos_throw_table[ix].thread, &info) < 0) {
+       /* Thread is dead -- let's take his place! */
+       __beos_throw_table[ix].thread = us;
+       __gthread_mutex_unlock(&beos_throw_mutex);
+       goto got_it;
+     }
+   }
+   __gthread_mutex_unlock(&beos_throw_mutex);
+   /* Try to malloc() (from within throw? shudder!) */
+   fallback = (struct eh_context *)malloc(sizeof(struct eh_context));
+   /* Else, we will just use the BEOS_THREAD_LIMIT - 1 slot, even through it's not guaranteed only for */
+   /* us. Make sure you don't throw in more than on place at the same time if you have more than */
+   /* 256 threads active in your team, or suffer the consequence. */
+ 
+ got_it:
+   /*assert((fallback != NULL) || (ix >= 0 && ix < BEOS_THREAD_LIMIT));*/
+   return (fallback ? fallback : &__beos_throw_table[ix].context);
+ }
+ 
  #endif __GTHREADS
  
  /* Support routines for setjmp/longjmp exception handling.  */
***************
*** 4007,4013 ****
--- 4076,4086 ----
  __pure_virtual ()
  {
  #ifndef inhibit_libc
+ #if __BEOS__
+   debugger (MESSAGE);
+ #else
    write (2, MESSAGE, sizeof (MESSAGE) - 1);
+ #endif
  #endif
    __terminate ();
  }
diff -cNr gcc-2.95.3/libio/gen-params gcc-2.95.3-beos/libio/gen-params
*** gcc-2.95.3/libio/gen-params	Wed Mar 24 08:58:21 1999
--- gcc-2.95.3-beos/libio/gen-params	Sat Apr  7 00:03:03 2001
***************
*** 281,287 ****
  fi
  tr '	' ' ' <TMP >dummy.out
  
! for TYPE in dev_t clock_t fpos_t gid_t ino_t mode_t nlink_t off_t pid_t ptrdiff_t sigset_t size_t ssize_t time_t uid_t va_list wchar_t wint_t int16_t uint16_t int32_t uint_32_t u_int16_t u_int32_t; do
      eval IMPORTED=\$$TYPE
      if [ -n "${IMPORTED}" ] ; then
  	eval "$TYPE='$IMPORTED'"
--- 281,287 ----
  fi
  tr '	' ' ' <TMP >dummy.out
  
! for TYPE in dev_t clock_t fpos_t fpos64_t gid_t ino_t mode_t nlink_t off_t off64_t pid_t ptrdiff_t sigset_t size_t ssize_t time_t uid_t va_list wchar_t wint_t int16_t uint16_t int32_t uint_32_t u_int16_t u_int32_t; do
      eval IMPORTED=\$$TYPE
      if [ -n "${IMPORTED}" ] ; then
  	eval "$TYPE='$IMPORTED'"
***************
*** 401,411 ****
--- 401,413 ----
  typedef ${clock_t-int /* default */} ${macro_prefix}clock_t;
  typedef ${dev_t-int /* default */} ${macro_prefix}dev_t;
  typedef ${fpos_t-long /* default */} ${macro_prefix}fpos_t;
+ typedef ${fpos64_t-long /* default */} ${macro_prefix}fpos64_t;
  typedef ${gid_t-int /* default */} ${macro_prefix}gid_t;
  typedef ${ino_t-int /* default */} ${macro_prefix}ino_t;
  typedef ${mode_t-int /* default */} ${macro_prefix}mode_t;
  typedef ${nlink_t-int /* default */} ${macro_prefix}nlink_t;
  typedef ${off_t-long /* default */} ${macro_prefix}off_t;
+ typedef ${off64_t-long /* default */} ${macro_prefix}off64_t;
  typedef ${pid_t-int /* default */} ${macro_prefix}pid_t;
  #ifndef __PTRDIFF_TYPE__
  #define __PTRDIFF_TYPE__ ${ptrdiff_t-long int /* default */}
